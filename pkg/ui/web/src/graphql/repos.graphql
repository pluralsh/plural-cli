fragment ApplyLock on ApplyLock {
  id
  lock
}

fragment Category on CategoryInfo {
  category
  count
}

fragment Repo on Repository {
  id
  name
  notes
  description
  documentation
  icon
  darkIcon
  private
  trending
  verified
  category
  oauthSettings {
    uriFormat
    authMethod
  }
  publisher {
    ...Publisher
  }
  recipes {
    name
    provider
    description
  }
}

fragment Repository on Repository {
  id
  name
  notes
  icon
  darkIcon
  description
  publisher { name }
  recipes { name }
}

fragment Dependencies on Dependencies {
  dependencies {
    name
    repo
    type
    version
    optional
  }
  wait
  application
  providers
  secrets
  wirings { terraform helm }
  providerWirings
  outputs
}


fragment Integration on Integration {
  id
  name
  icon
  sourceUrl
  description
  tags { tag }
  publisher { ...Publisher }
}

query Repository($id: ID, $name: String) {
  repository(id: $id, name: $name) {
    ...Repo
    editable
    publicKey
    secrets
    artifacts {
      ...Artifact
    }
    installation {
      ...Installation
      oidcProvider {
        ...OIDCProvider
      }
    }
    tags {
      tag
    }
    readme
    mainBranch
    gitUrl
    homepage
    license {
      name
      url
    }
    documentation
    community {
      discord
      slack
      homepage
      gitUrl
      twitter
    }
  }
}

mutation CreateResourceDefinition($name: String!, $input: ResourceDefinitionAttributes!) {
  updateRepository(repositoryName: $name, attributes: {integrationResourceDefinition: $input}) {
    id
  }
}

mutation CreateIntegration($name: String!, $attrs: IntegrationAttributes!) {
  createIntegration(repositoryName: $name, attributes: $attrs) { id }
}

mutation UpdateRepository($name: String!, $attrs: RepositoryAttributes!) {
  updateRepository(repositoryName: $name, attributes: $attrs) { id }
}

mutation CreateRepository($name: String!, $publisher: String!, $attributes: RepositoryAttributes!) {
  upsertRepository(name: $name, publisher: $publisher, attributes: $attributes) { id }
}

mutation AcquireLock($name: String!) {
  acquireLock(repository: $name) { ...ApplyLock }
}

mutation ReleaseLock($name: String!, $attrs: LockAttributes!) {
  releaseLock(repository: $name, attributes: $attrs) { ...ApplyLock	}
}

mutation UnlockRepository($name: String!) {
  unlockRepository(name: $name)
}

query ListRepositories($q: String, $installed: Boolean, $first: Int = 100, $provider: Provider = null) {
  repositories(q: $q, first: $first, installed: $installed, provider: $provider) {
    edges { node { ...Repository } }
  }
}

query Scaffolds($app: String!, $pub: String!, $cat: Category!, $ing: Boolean, $pg: Boolean) {
  scaffold(application: $app, publisher: $pub, category: $cat, ingress: $ing, postgres: $pg) {
    path
    content
  }
}

mutation DeleteRepository($id: ID!) {
  deleteRepository(repositoryId: $id){
    id
  }
}
