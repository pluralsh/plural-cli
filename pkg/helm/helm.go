package helm

import (
	"bytes"
	"fmt"
	"log"
	"strings"

	"github.com/pluralsh/plural/pkg/utils"
	"helm.sh/helm/v3/pkg/action"
	"helm.sh/helm/v3/pkg/chart/loader"
	"helm.sh/helm/v3/pkg/cli"
)

func debug(format string, v ...interface{}) {
	if utils.EnableDebug {
		format = fmt.Sprintf("INFO: %s\n", format)
		err := log.Output(2, fmt.Sprintf(format, v...))
		if err != nil {
			log.Panic(err)
		}
	}
}

func GetActionConfig(namespace string) (*action.Configuration, error) {
	actionConfig := new(action.Configuration)
	settings := cli.New()
	settings.SetNamespace(namespace)
	settings.Debug = false
	if err := actionConfig.Init(settings.RESTClientGetter(), namespace, "", debug); err != nil {
		return nil, err
	}
	return actionConfig, nil
}

func Template(conf *action.Configuration, name, namespace, path string, isUpgrade, validate bool, values map[string]interface{}) ([]byte, error) {
	// load chart from the path
	chart, err := loader.Load(path)
	if err != nil {
		return nil, err
	}

	client := action.NewInstall(conf)
	client.DryRun = true
	client.ReleaseName = name
	client.Replace = true // Skip the name check
	client.ClientOnly = !validate
	client.IsUpgrade = isUpgrade
	client.Namespace = namespace
	client.IncludeCRDs = false
	rel, err := client.Run(chart, values)
	if err != nil {
		return nil, err
	}
	var manifests bytes.Buffer
	fmt.Fprintln(&manifests, strings.TrimSpace(rel.Manifest))
	return manifests.Bytes(), nil
}

func Lint(path, namespace string, values map[string]interface{}) error {
	client := action.NewLint()
	client.Namespace = namespace
	result := client.Run([]string{path}, values)
	// All the Errors that are generated by a chart
	// that failed a lint will be included in the
	// results.Messages so we only need to print
	// the Errors if there are no Messages.
	if len(result.Messages) == 0 {
		for _, err := range result.Errors {
			fmt.Printf("Error %s\n", err)
		}
	}
	if len(result.Errors) != 0 {
		return fmt.Errorf("failed")
	}
	return nil
}
