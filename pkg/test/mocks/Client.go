// Code generated by mockery v2.43.1. DO NOT EDIT.

package mocks

import (
	gqlclient "github.com/pluralsh/gqlclient"
	api "github.com/pluralsh/plural-cli/pkg/api"

	mock "github.com/stretchr/testify/mock"
)

// Client is an autogenerated mock type for the Client type
type Client struct {
	mock.Mock
}

// AcquireLock provides a mock function with given fields: repo
func (_m *Client) AcquireLock(repo string) (*api.ApplyLock, error) {
	ret := _m.Called(repo)

	if len(ret) == 0 {
		panic("no return value specified for AcquireLock")
	}

	var r0 *api.ApplyLock
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*api.ApplyLock, error)); ok {
		return rf(repo)
	}
	if rf, ok := ret.Get(0).(func(string) *api.ApplyLock); ok {
		r0 = rf(repo)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*api.ApplyLock)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(repo)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Chat provides a mock function with given fields: history
func (_m *Client) Chat(history []*api.ChatMessage) (*api.ChatMessage, error) {
	ret := _m.Called(history)

	if len(ret) == 0 {
		panic("no return value specified for Chat")
	}

	var r0 *api.ChatMessage
	var r1 error
	if rf, ok := ret.Get(0).(func([]*api.ChatMessage) (*api.ChatMessage, error)); ok {
		return rf(history)
	}
	if rf, ok := ret.Get(0).(func([]*api.ChatMessage) *api.ChatMessage); ok {
		r0 = rf(history)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*api.ChatMessage)
		}
	}

	if rf, ok := ret.Get(1).(func([]*api.ChatMessage) error); ok {
		r1 = rf(history)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Cluster provides a mock function with given fields: id
func (_m *Client) Cluster(id string) (*api.Cluster, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for Cluster")
	}

	var r0 *api.Cluster
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*api.Cluster, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) *api.Cluster); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*api.Cluster)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Clusters provides a mock function with given fields:
func (_m *Client) Clusters() ([]*api.Cluster, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Clusters")
	}

	var r0 []*api.Cluster
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]*api.Cluster, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []*api.Cluster); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*api.Cluster)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateAccessToken provides a mock function with given fields:
func (_m *Client) CreateAccessToken() (string, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for CreateAccessToken")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func() (string, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateArtifact provides a mock function with given fields: repo, attrs
func (_m *Client) CreateArtifact(repo string, attrs api.ArtifactAttributes) (api.Artifact, error) {
	ret := _m.Called(repo, attrs)

	if len(ret) == 0 {
		panic("no return value specified for CreateArtifact")
	}

	var r0 api.Artifact
	var r1 error
	if rf, ok := ret.Get(0).(func(string, api.ArtifactAttributes) (api.Artifact, error)); ok {
		return rf(repo, attrs)
	}
	if rf, ok := ret.Get(0).(func(string, api.ArtifactAttributes) api.Artifact); ok {
		r0 = rf(repo, attrs)
	} else {
		r0 = ret.Get(0).(api.Artifact)
	}

	if rf, ok := ret.Get(1).(func(string, api.ArtifactAttributes) error); ok {
		r1 = rf(repo, attrs)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateCrd provides a mock function with given fields: repo, chart, file
func (_m *Client) CreateCrd(repo string, chart string, file string) error {
	ret := _m.Called(repo, chart, file)

	if len(ret) == 0 {
		panic("no return value specified for CreateCrd")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, string) error); ok {
		r0 = rf(repo, chart, file)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateDependency provides a mock function with given fields: source, dest
func (_m *Client) CreateDependency(source string, dest string) error {
	ret := _m.Called(source, dest)

	if len(ret) == 0 {
		panic("no return value specified for CreateDependency")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(source, dest)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateDomain provides a mock function with given fields: name
func (_m *Client) CreateDomain(name string) error {
	ret := _m.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for CreateDomain")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(name)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateEvent provides a mock function with given fields: event
func (_m *Client) CreateEvent(event *api.UserEventAttributes) error {
	ret := _m.Called(event)

	if len(ret) == 0 {
		panic("no return value specified for CreateEvent")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*api.UserEventAttributes) error); ok {
		r0 = rf(event)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateInstallation provides a mock function with given fields: id
func (_m *Client) CreateInstallation(id string) (string, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for CreateInstallation")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (string, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateKey provides a mock function with given fields: name, content
func (_m *Client) CreateKey(name string, content string) error {
	ret := _m.Called(name, content)

	if len(ret) == 0 {
		panic("no return value specified for CreateKey")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(name, content)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateKeyBackup provides a mock function with given fields: attrs
func (_m *Client) CreateKeyBackup(attrs api.KeyBackupAttributes) error {
	ret := _m.Called(attrs)

	if len(ret) == 0 {
		panic("no return value specified for CreateKeyBackup")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(api.KeyBackupAttributes) error); ok {
		r0 = rf(attrs)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateRecipe provides a mock function with given fields: repoName, attrs
func (_m *Client) CreateRecipe(repoName string, attrs gqlclient.RecipeAttributes) (string, error) {
	ret := _m.Called(repoName, attrs)

	if len(ret) == 0 {
		panic("no return value specified for CreateRecipe")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string, gqlclient.RecipeAttributes) (string, error)); ok {
		return rf(repoName, attrs)
	}
	if rf, ok := ret.Get(0).(func(string, gqlclient.RecipeAttributes) string); ok {
		r0 = rf(repoName, attrs)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string, gqlclient.RecipeAttributes) error); ok {
		r1 = rf(repoName, attrs)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateRepository provides a mock function with given fields: name, publisher, input
func (_m *Client) CreateRepository(name string, publisher string, input *gqlclient.RepositoryAttributes) error {
	ret := _m.Called(name, publisher, input)

	if len(ret) == 0 {
		panic("no return value specified for CreateRepository")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, *gqlclient.RepositoryAttributes) error); ok {
		r0 = rf(name, publisher, input)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateStack provides a mock function with given fields: attributes
func (_m *Client) CreateStack(attributes gqlclient.StackAttributes) (string, error) {
	ret := _m.Called(attributes)

	if len(ret) == 0 {
		panic("no return value specified for CreateStack")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(gqlclient.StackAttributes) (string, error)); ok {
		return rf(attributes)
	}
	if rf, ok := ret.Get(0).(func(gqlclient.StackAttributes) string); ok {
		r0 = rf(attributes)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(gqlclient.StackAttributes) error); ok {
		r1 = rf(attributes)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateTrust provides a mock function with given fields: issuer, trust
func (_m *Client) CreateTrust(issuer string, trust string) error {
	ret := _m.Called(issuer, trust)

	if len(ret) == 0 {
		panic("no return value specified for CreateTrust")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(issuer, trust)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateUpgrade provides a mock function with given fields: queue, repository, attrs
func (_m *Client) CreateUpgrade(queue string, repository string, attrs gqlclient.UpgradeAttributes) error {
	ret := _m.Called(queue, repository, attrs)

	if len(ret) == 0 {
		panic("no return value specified for CreateUpgrade")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, gqlclient.UpgradeAttributes) error); ok {
		r0 = rf(queue, repository, attrs)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteEabCredential provides a mock function with given fields: cluster, provider
func (_m *Client) DeleteEabCredential(cluster string, provider string) error {
	ret := _m.Called(cluster, provider)

	if len(ret) == 0 {
		panic("no return value specified for DeleteEabCredential")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(cluster, provider)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteInstallation provides a mock function with given fields: id
func (_m *Client) DeleteInstallation(id string) error {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteInstallation")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteShell provides a mock function with given fields:
func (_m *Client) DeleteShell() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for DeleteShell")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteTrust provides a mock function with given fields: id
func (_m *Client) DeleteTrust(id string) error {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteTrust")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DestroyCluster provides a mock function with given fields: domain, name, provider
func (_m *Client) DestroyCluster(domain string, name string, provider string) error {
	ret := _m.Called(domain, name, provider)

	if len(ret) == 0 {
		panic("no return value specified for DestroyCluster")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, string) error); ok {
		r0 = rf(domain, name, provider)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeviceLogin provides a mock function with given fields:
func (_m *Client) DeviceLogin() (*api.DeviceLogin, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for DeviceLogin")
	}

	var r0 *api.DeviceLogin
	var r1 error
	if rf, ok := ret.Get(0).(func() (*api.DeviceLogin, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() *api.DeviceLogin); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*api.DeviceLogin)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetChartInstallations provides a mock function with given fields: repoId
func (_m *Client) GetChartInstallations(repoId string) ([]*api.ChartInstallation, error) {
	ret := _m.Called(repoId)

	if len(ret) == 0 {
		panic("no return value specified for GetChartInstallations")
	}

	var r0 []*api.ChartInstallation
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]*api.ChartInstallation, error)); ok {
		return rf(repoId)
	}
	if rf, ok := ret.Get(0).(func(string) []*api.ChartInstallation); ok {
		r0 = rf(repoId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*api.ChartInstallation)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(repoId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCharts provides a mock function with given fields: repoId
func (_m *Client) GetCharts(repoId string) ([]*api.Chart, error) {
	ret := _m.Called(repoId)

	if len(ret) == 0 {
		panic("no return value specified for GetCharts")
	}

	var r0 []*api.Chart
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]*api.Chart, error)); ok {
		return rf(repoId)
	}
	if rf, ok := ret.Get(0).(func(string) []*api.Chart); ok {
		r0 = rf(repoId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*api.Chart)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(repoId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetEabCredential provides a mock function with given fields: cluster, provider
func (_m *Client) GetEabCredential(cluster string, provider string) (*api.EabCredential, error) {
	ret := _m.Called(cluster, provider)

	if len(ret) == 0 {
		panic("no return value specified for GetEabCredential")
	}

	var r0 *api.EabCredential
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (*api.EabCredential, error)); ok {
		return rf(cluster, provider)
	}
	if rf, ok := ret.Get(0).(func(string, string) *api.EabCredential); ok {
		r0 = rf(cluster, provider)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*api.EabCredential)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(cluster, provider)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetHelp provides a mock function with given fields: prompt
func (_m *Client) GetHelp(prompt string) (string, error) {
	ret := _m.Called(prompt)

	if len(ret) == 0 {
		panic("no return value specified for GetHelp")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (string, error)); ok {
		return rf(prompt)
	}
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(prompt)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(prompt)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetInstallation provides a mock function with given fields: name
func (_m *Client) GetInstallation(name string) (*api.Installation, error) {
	ret := _m.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for GetInstallation")
	}

	var r0 *api.Installation
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*api.Installation, error)); ok {
		return rf(name)
	}
	if rf, ok := ret.Get(0).(func(string) *api.Installation); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*api.Installation)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetInstallationById provides a mock function with given fields: id
func (_m *Client) GetInstallationById(id string) (*api.Installation, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetInstallationById")
	}

	var r0 *api.Installation
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*api.Installation, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) *api.Installation); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*api.Installation)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetInstallations provides a mock function with given fields:
func (_m *Client) GetInstallations() ([]*api.Installation, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetInstallations")
	}

	var r0 []*api.Installation
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]*api.Installation, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []*api.Installation); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*api.Installation)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetKeyBackup provides a mock function with given fields: name
func (_m *Client) GetKeyBackup(name string) (*api.KeyBackup, error) {
	ret := _m.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for GetKeyBackup")
	}

	var r0 *api.KeyBackup
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*api.KeyBackup, error)); ok {
		return rf(name)
	}
	if rf, ok := ret.Get(0).(func(string) *api.KeyBackup); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*api.KeyBackup)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPackageInstallations provides a mock function with given fields: repoId
func (_m *Client) GetPackageInstallations(repoId string) ([]*api.ChartInstallation, []*api.TerraformInstallation, error) {
	ret := _m.Called(repoId)

	if len(ret) == 0 {
		panic("no return value specified for GetPackageInstallations")
	}

	var r0 []*api.ChartInstallation
	var r1 []*api.TerraformInstallation
	var r2 error
	if rf, ok := ret.Get(0).(func(string) ([]*api.ChartInstallation, []*api.TerraformInstallation, error)); ok {
		return rf(repoId)
	}
	if rf, ok := ret.Get(0).(func(string) []*api.ChartInstallation); ok {
		r0 = rf(repoId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*api.ChartInstallation)
		}
	}

	if rf, ok := ret.Get(1).(func(string) []*api.TerraformInstallation); ok {
		r1 = rf(repoId)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]*api.TerraformInstallation)
		}
	}

	if rf, ok := ret.Get(2).(func(string) error); ok {
		r2 = rf(repoId)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetRecipe provides a mock function with given fields: repo, name
func (_m *Client) GetRecipe(repo string, name string) (*api.Recipe, error) {
	ret := _m.Called(repo, name)

	if len(ret) == 0 {
		panic("no return value specified for GetRecipe")
	}

	var r0 *api.Recipe
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (*api.Recipe, error)); ok {
		return rf(repo, name)
	}
	if rf, ok := ret.Get(0).(func(string, string) *api.Recipe); ok {
		r0 = rf(repo, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*api.Recipe)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(repo, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRecipeByID provides a mock function with given fields: id
func (_m *Client) GetRecipeByID(id string) (*api.Recipe, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetRecipeByID")
	}

	var r0 *api.Recipe
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*api.Recipe, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) *api.Recipe); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*api.Recipe)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRepository provides a mock function with given fields: repo
func (_m *Client) GetRepository(repo string) (*api.Repository, error) {
	ret := _m.Called(repo)

	if len(ret) == 0 {
		panic("no return value specified for GetRepository")
	}

	var r0 *api.Repository
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*api.Repository, error)); ok {
		return rf(repo)
	}
	if rf, ok := ret.Get(0).(func(string) *api.Repository); ok {
		r0 = rf(repo)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*api.Repository)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(repo)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetShell provides a mock function with given fields:
func (_m *Client) GetShell() (api.CloudShell, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetShell")
	}

	var r0 api.CloudShell
	var r1 error
	if rf, ok := ret.Get(0).(func() (api.CloudShell, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() api.CloudShell); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(api.CloudShell)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetStack provides a mock function with given fields: name, provider
func (_m *Client) GetStack(name string, provider string) (*api.Stack, error) {
	ret := _m.Called(name, provider)

	if len(ret) == 0 {
		panic("no return value specified for GetStack")
	}

	var r0 *api.Stack
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (*api.Stack, error)); ok {
		return rf(name, provider)
	}
	if rf, ok := ret.Get(0).(func(string, string) *api.Stack); ok {
		r0 = rf(name, provider)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*api.Stack)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(name, provider)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTerraform provides a mock function with given fields: repoId
func (_m *Client) GetTerraform(repoId string) ([]*api.Terraform, error) {
	ret := _m.Called(repoId)

	if len(ret) == 0 {
		panic("no return value specified for GetTerraform")
	}

	var r0 []*api.Terraform
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]*api.Terraform, error)); ok {
		return rf(repoId)
	}
	if rf, ok := ret.Get(0).(func(string) []*api.Terraform); ok {
		r0 = rf(repoId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*api.Terraform)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(repoId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTerraformInstallations provides a mock function with given fields: repoId
func (_m *Client) GetTerraformInstallations(repoId string) ([]*api.TerraformInstallation, error) {
	ret := _m.Called(repoId)

	if len(ret) == 0 {
		panic("no return value specified for GetTerraformInstallations")
	}

	var r0 []*api.TerraformInstallation
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]*api.TerraformInstallation, error)); ok {
		return rf(repoId)
	}
	if rf, ok := ret.Get(0).(func(string) []*api.TerraformInstallation); ok {
		r0 = rf(repoId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*api.TerraformInstallation)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(repoId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTerraformVersions provides a mock function with given fields: id
func (_m *Client) GetTerraformVersions(id string) ([]*api.Version, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetTerraformVersions")
	}

	var r0 []*api.Version
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]*api.Version, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) []*api.Version); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*api.Version)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTfProviderScaffold provides a mock function with given fields: name, version
func (_m *Client) GetTfProviderScaffold(name string, version string) (string, error) {
	ret := _m.Called(name, version)

	if len(ret) == 0 {
		panic("no return value specified for GetTfProviderScaffold")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (string, error)); ok {
		return rf(name, version)
	}
	if rf, ok := ret.Get(0).(func(string, string) string); ok {
		r0 = rf(name, version)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(name, version)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTfProviders provides a mock function with given fields:
func (_m *Client) GetTfProviders() ([]string, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetTfProviders")
	}

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]string, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetVersions provides a mock function with given fields: chartId
func (_m *Client) GetVersions(chartId string) ([]*api.Version, error) {
	ret := _m.Called(chartId)

	if len(ret) == 0 {
		panic("no return value specified for GetVersions")
	}

	var r0 []*api.Version
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]*api.Version, error)); ok {
		return rf(chartId)
	}
	if rf, ok := ret.Get(0).(func(string) []*api.Version); ok {
		r0 = rf(chartId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*api.Version)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(chartId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GrabAccessToken provides a mock function with given fields:
func (_m *Client) GrabAccessToken() (string, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GrabAccessToken")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func() (string, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ImpersonateServiceAccount provides a mock function with given fields: email
func (_m *Client) ImpersonateServiceAccount(email string) (string, string, error) {
	ret := _m.Called(email)

	if len(ret) == 0 {
		panic("no return value specified for ImpersonateServiceAccount")
	}

	var r0 string
	var r1 string
	var r2 error
	if rf, ok := ret.Get(0).(func(string) (string, string, error)); ok {
		return rf(email)
	}
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(email)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string) string); ok {
		r1 = rf(email)
	} else {
		r1 = ret.Get(1).(string)
	}

	if rf, ok := ret.Get(2).(func(string) error); ok {
		r2 = rf(email)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// InstallRecipe provides a mock function with given fields: id
func (_m *Client) InstallRecipe(id string) error {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for InstallRecipe")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// InstallVersion provides a mock function with given fields: tp, repo, pkg, vsn
func (_m *Client) InstallVersion(tp string, repo string, pkg string, vsn string) error {
	ret := _m.Called(tp, repo, pkg, vsn)

	if len(ret) == 0 {
		panic("no return value specified for InstallVersion")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, string, string) error); ok {
		r0 = rf(tp, repo, pkg, vsn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ListArtifacts provides a mock function with given fields: repo
func (_m *Client) ListArtifacts(repo string) ([]api.Artifact, error) {
	ret := _m.Called(repo)

	if len(ret) == 0 {
		panic("no return value specified for ListArtifacts")
	}

	var r0 []api.Artifact
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]api.Artifact, error)); ok {
		return rf(repo)
	}
	if rf, ok := ret.Get(0).(func(string) []api.Artifact); ok {
		r0 = rf(repo)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]api.Artifact)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(repo)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListKeyBackups provides a mock function with given fields:
func (_m *Client) ListKeyBackups() ([]*api.KeyBackup, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ListKeyBackups")
	}

	var r0 []*api.KeyBackup
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]*api.KeyBackup, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []*api.KeyBackup); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*api.KeyBackup)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListKeys provides a mock function with given fields: emails
func (_m *Client) ListKeys(emails []string) ([]*api.PublicKey, error) {
	ret := _m.Called(emails)

	if len(ret) == 0 {
		panic("no return value specified for ListKeys")
	}

	var r0 []*api.PublicKey
	var r1 error
	if rf, ok := ret.Get(0).(func([]string) ([]*api.PublicKey, error)); ok {
		return rf(emails)
	}
	if rf, ok := ret.Get(0).(func([]string) []*api.PublicKey); ok {
		r0 = rf(emails)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*api.PublicKey)
		}
	}

	if rf, ok := ret.Get(1).(func([]string) error); ok {
		r1 = rf(emails)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListRecipes provides a mock function with given fields: repo, provider
func (_m *Client) ListRecipes(repo string, provider string) ([]*api.Recipe, error) {
	ret := _m.Called(repo, provider)

	if len(ret) == 0 {
		panic("no return value specified for ListRecipes")
	}

	var r0 []*api.Recipe
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) ([]*api.Recipe, error)); ok {
		return rf(repo, provider)
	}
	if rf, ok := ret.Get(0).(func(string, string) []*api.Recipe); ok {
		r0 = rf(repo, provider)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*api.Recipe)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(repo, provider)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListRepositories provides a mock function with given fields: query
func (_m *Client) ListRepositories(query string) ([]*api.Repository, error) {
	ret := _m.Called(query)

	if len(ret) == 0 {
		panic("no return value specified for ListRepositories")
	}

	var r0 []*api.Repository
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]*api.Repository, error)); ok {
		return rf(query)
	}
	if rf, ok := ret.Get(0).(func(string) []*api.Repository); ok {
		r0 = rf(query)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*api.Repository)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(query)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListStacks provides a mock function with given fields: featured
func (_m *Client) ListStacks(featured bool) ([]*api.Stack, error) {
	ret := _m.Called(featured)

	if len(ret) == 0 {
		panic("no return value specified for ListStacks")
	}

	var r0 []*api.Stack
	var r1 error
	if rf, ok := ret.Get(0).(func(bool) ([]*api.Stack, error)); ok {
		return rf(featured)
	}
	if rf, ok := ret.Get(0).(func(bool) []*api.Stack); ok {
		r0 = rf(featured)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*api.Stack)
		}
	}

	if rf, ok := ret.Get(1).(func(bool) error); ok {
		r1 = rf(featured)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Login provides a mock function with given fields: email, pwd
func (_m *Client) Login(email string, pwd string) (string, error) {
	ret := _m.Called(email, pwd)

	if len(ret) == 0 {
		panic("no return value specified for Login")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (string, error)); ok {
		return rf(email, pwd)
	}
	if rf, ok := ret.Get(0).(func(string, string) string); ok {
		r0 = rf(email, pwd)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(email, pwd)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LoginMethod provides a mock function with given fields: email
func (_m *Client) LoginMethod(email string) (*api.LoginMethod, error) {
	ret := _m.Called(email)

	if len(ret) == 0 {
		panic("no return value specified for LoginMethod")
	}

	var r0 *api.LoginMethod
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*api.LoginMethod, error)); ok {
		return rf(email)
	}
	if rf, ok := ret.Get(0).(func(string) *api.LoginMethod); ok {
		r0 = rf(email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*api.LoginMethod)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MarkSynced provides a mock function with given fields: repo
func (_m *Client) MarkSynced(repo string) error {
	ret := _m.Called(repo)

	if len(ret) == 0 {
		panic("no return value specified for MarkSynced")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(repo)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Me provides a mock function with given fields:
func (_m *Client) Me() (*api.Me, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Me")
	}

	var r0 *api.Me
	var r1 error
	if rf, ok := ret.Get(0).(func() (*api.Me, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() *api.Me); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*api.Me)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// OIDCProvider provides a mock function with given fields: id, attributes
func (_m *Client) OIDCProvider(id string, attributes *api.OidcProviderAttributes) error {
	ret := _m.Called(id, attributes)

	if len(ret) == 0 {
		panic("no return value specified for OIDCProvider")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, *api.OidcProviderAttributes) error); ok {
		r0 = rf(id, attributes)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// OidcToken provides a mock function with given fields: provider, token, email
func (_m *Client) OidcToken(provider gqlclient.ExternalOidcProvider, token string, email string) (string, error) {
	ret := _m.Called(provider, token, email)

	if len(ret) == 0 {
		panic("no return value specified for OidcToken")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(gqlclient.ExternalOidcProvider, string, string) (string, error)); ok {
		return rf(provider, token, email)
	}
	if rf, ok := ret.Get(0).(func(gqlclient.ExternalOidcProvider, string, string) string); ok {
		r0 = rf(provider, token, email)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(gqlclient.ExternalOidcProvider, string, string) error); ok {
		r1 = rf(provider, token, email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PollLoginToken provides a mock function with given fields: token
func (_m *Client) PollLoginToken(token string) (string, error) {
	ret := _m.Called(token)

	if len(ret) == 0 {
		panic("no return value specified for PollLoginToken")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (string, error)); ok {
		return rf(token)
	}
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(token)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(token)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PromoteCluster provides a mock function with given fields:
func (_m *Client) PromoteCluster() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for PromoteCluster")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Release provides a mock function with given fields: name, tags
func (_m *Client) Release(name string, tags []string) error {
	ret := _m.Called(name, tags)

	if len(ret) == 0 {
		panic("no return value specified for Release")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, []string) error); ok {
		r0 = rf(name, tags)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ReleaseLock provides a mock function with given fields: repo, lock
func (_m *Client) ReleaseLock(repo string, lock string) (*api.ApplyLock, error) {
	ret := _m.Called(repo, lock)

	if len(ret) == 0 {
		panic("no return value specified for ReleaseLock")
	}

	var r0 *api.ApplyLock
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (*api.ApplyLock, error)); ok {
		return rf(repo, lock)
	}
	if rf, ok := ret.Get(0).(func(string, string) *api.ApplyLock); ok {
		r0 = rf(repo, lock)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*api.ApplyLock)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(repo, lock)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ResetInstallations provides a mock function with given fields:
func (_m *Client) ResetInstallations() (int, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ResetInstallations")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func() (int, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Scaffolds provides a mock function with given fields: in
func (_m *Client) Scaffolds(in *api.ScaffoldInputs) ([]*api.ScaffoldFile, error) {
	ret := _m.Called(in)

	if len(ret) == 0 {
		panic("no return value specified for Scaffolds")
	}

	var r0 []*api.ScaffoldFile
	var r1 error
	if rf, ok := ret.Get(0).(func(*api.ScaffoldInputs) ([]*api.ScaffoldFile, error)); ok {
		return rf(in)
	}
	if rf, ok := ret.Get(0).(func(*api.ScaffoldInputs) []*api.ScaffoldFile); ok {
		r0 = rf(in)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*api.ScaffoldFile)
		}
	}

	if rf, ok := ret.Get(1).(func(*api.ScaffoldInputs) error); ok {
		r1 = rf(in)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TransferOwnership provides a mock function with given fields: name, email
func (_m *Client) TransferOwnership(name string, email string) error {
	ret := _m.Called(name, email)

	if len(ret) == 0 {
		panic("no return value specified for TransferOwnership")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(name, email)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UninstallChart provides a mock function with given fields: id
func (_m *Client) UninstallChart(id string) error {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for UninstallChart")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UninstallTerraform provides a mock function with given fields: id
func (_m *Client) UninstallTerraform(id string) error {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for UninstallTerraform")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UnlockRepository provides a mock function with given fields: name
func (_m *Client) UnlockRepository(name string) error {
	ret := _m.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for UnlockRepository")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(name)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateVersion provides a mock function with given fields: spec, tags
func (_m *Client) UpdateVersion(spec *api.VersionSpec, tags []string) error {
	ret := _m.Called(spec, tags)

	if len(ret) == 0 {
		panic("no return value specified for UpdateVersion")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*api.VersionSpec, []string) error); ok {
		r0 = rf(spec, tags)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UploadTerraform provides a mock function with given fields: dir, repoName
func (_m *Client) UploadTerraform(dir string, repoName string) (api.Terraform, error) {
	ret := _m.Called(dir, repoName)

	if len(ret) == 0 {
		panic("no return value specified for UploadTerraform")
	}

	var r0 api.Terraform
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (api.Terraform, error)); ok {
		return rf(dir, repoName)
	}
	if rf, ok := ret.Get(0).(func(string, string) api.Terraform); ok {
		r0 = rf(dir, repoName)
	} else {
		r0 = ret.Get(0).(api.Terraform)
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(dir, repoName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewClient creates a new instance of Client. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *Client {
	mock := &Client{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
